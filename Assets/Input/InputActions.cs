//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Input/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""MovementLeft"",
            ""id"": ""a7559280-7d53-4510-8b16-26ba417c3fa8"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""56ace873-8f55-41c4-b3fc-f467151d01ef"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""26608b31-7c20-43eb-93c5-ec5965d5485c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Kick"",
                    ""type"": ""Button"",
                    ""id"": ""28d44bc2-47dc-4e1f-8643-259b63dfb746"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3ce5e4f2-656d-45aa-9d19-c5b2e1735d11"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""1400b458-c37a-437b-b443-bd638d657ed4"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""d140c149-24f7-4fdb-a84c-847113afc2c0"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""93eff096-378b-4807-b61d-8cc5cb6d1ce8"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d600f900-4100-4771-8aff-090fac72c843"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Kick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cd6eda7d-d55e-4fc6-b7f2-c106c7e84d5e"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Kick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MovementRight"",
            ""id"": ""357164ea-dab1-495f-a271-71d45041e7c0"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""80575e16-0799-4c2f-802b-0493b334e2b1"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""e5eb389d-a2f2-4b7d-8865-c20d61be47d8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Kick"",
                    ""type"": ""Button"",
                    ""id"": ""2af1730c-6ce7-4770-b968-f22f435fa120"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f76f2036-46ca-44c9-b23d-a251dffdbc83"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""4b269095-5dd8-47e0-9639-bdf028e08f42"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""2c6e2811-e531-420f-a33b-529fdec33757"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""7e3475b3-39af-4f33-bb16-45f9f1f58430"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""68c09291-b9dc-4944-9e67-e54b8faedeb2"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Kick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a3fbb059-7fd1-4a3c-9615-87cb0830d91e"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Kick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b0a34560-3fae-4141-836f-d89ff651cef0"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Kick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MovementLeft
        m_MovementLeft = asset.FindActionMap("MovementLeft", throwIfNotFound: true);
        m_MovementLeft_Move = m_MovementLeft.FindAction("Move", throwIfNotFound: true);
        m_MovementLeft_Jump = m_MovementLeft.FindAction("Jump", throwIfNotFound: true);
        m_MovementLeft_Kick = m_MovementLeft.FindAction("Kick", throwIfNotFound: true);
        // MovementRight
        m_MovementRight = asset.FindActionMap("MovementRight", throwIfNotFound: true);
        m_MovementRight_Move = m_MovementRight.FindAction("Move", throwIfNotFound: true);
        m_MovementRight_Jump = m_MovementRight.FindAction("Jump", throwIfNotFound: true);
        m_MovementRight_Kick = m_MovementRight.FindAction("Kick", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MovementLeft
    private readonly InputActionMap m_MovementLeft;
    private List<IMovementLeftActions> m_MovementLeftActionsCallbackInterfaces = new List<IMovementLeftActions>();
    private readonly InputAction m_MovementLeft_Move;
    private readonly InputAction m_MovementLeft_Jump;
    private readonly InputAction m_MovementLeft_Kick;
    public struct MovementLeftActions
    {
        private @InputActions m_Wrapper;
        public MovementLeftActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_MovementLeft_Move;
        public InputAction @Jump => m_Wrapper.m_MovementLeft_Jump;
        public InputAction @Kick => m_Wrapper.m_MovementLeft_Kick;
        public InputActionMap Get() { return m_Wrapper.m_MovementLeft; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementLeftActions set) { return set.Get(); }
        public void AddCallbacks(IMovementLeftActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementLeftActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementLeftActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Kick.started += instance.OnKick;
            @Kick.performed += instance.OnKick;
            @Kick.canceled += instance.OnKick;
        }

        private void UnregisterCallbacks(IMovementLeftActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Kick.started -= instance.OnKick;
            @Kick.performed -= instance.OnKick;
            @Kick.canceled -= instance.OnKick;
        }

        public void RemoveCallbacks(IMovementLeftActions instance)
        {
            if (m_Wrapper.m_MovementLeftActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementLeftActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementLeftActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementLeftActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementLeftActions @MovementLeft => new MovementLeftActions(this);

    // MovementRight
    private readonly InputActionMap m_MovementRight;
    private List<IMovementRightActions> m_MovementRightActionsCallbackInterfaces = new List<IMovementRightActions>();
    private readonly InputAction m_MovementRight_Move;
    private readonly InputAction m_MovementRight_Jump;
    private readonly InputAction m_MovementRight_Kick;
    public struct MovementRightActions
    {
        private @InputActions m_Wrapper;
        public MovementRightActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_MovementRight_Move;
        public InputAction @Jump => m_Wrapper.m_MovementRight_Jump;
        public InputAction @Kick => m_Wrapper.m_MovementRight_Kick;
        public InputActionMap Get() { return m_Wrapper.m_MovementRight; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementRightActions set) { return set.Get(); }
        public void AddCallbacks(IMovementRightActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementRightActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementRightActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Kick.started += instance.OnKick;
            @Kick.performed += instance.OnKick;
            @Kick.canceled += instance.OnKick;
        }

        private void UnregisterCallbacks(IMovementRightActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Kick.started -= instance.OnKick;
            @Kick.performed -= instance.OnKick;
            @Kick.canceled -= instance.OnKick;
        }

        public void RemoveCallbacks(IMovementRightActions instance)
        {
            if (m_Wrapper.m_MovementRightActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementRightActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementRightActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementRightActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementRightActions @MovementRight => new MovementRightActions(this);
    public interface IMovementLeftActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnKick(InputAction.CallbackContext context);
    }
    public interface IMovementRightActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnKick(InputAction.CallbackContext context);
    }
}
